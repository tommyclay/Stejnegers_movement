cal_twl_both <- rbind(cal_twl1,cal_twl2)
# define calibration period
calib <- thresholdCalibration(cal_twl_both$Twilight, cal_twl_both$Rise, lon.calib, lat.calib, method = "gamma")
zen[i]  <- calib[1]
zen0[i] <- calib[2]
alpha_mean[i] <- calib[3]
alpha_sd[i] <- calib[4]
}
i
#  load in both calibration periods
cal_twl1 <-  read.csv(paste0(out_wd, gsub(".lux", "", files[i]),  " cal1 twl.csv"))
cal_twl1$Twilight <- as.POSIXct(cal_twl$Twilight,tz = "GMT")
#  load in both calibration periods
cal_twl1 <-  read.csv(paste0(out_wd, gsub(".lux", "", files[i]),  " cal1 twl.csv"))
cal_twl1$Twilight <- as.POSIXct(cal_twl1$Twilight,tz = "GMT")
cal_twl2 <-  read.csv(paste0(out_wd, gsub(".lux", "", files[i]),  " cal2 twl.csv"))
cal_twl2$Twilight <- as.POSIXct(cal_twl2$Twilight,tz = "GMT")
cal_twl_both <- rbind(cal_twl1,cal_twl2)
# define calibration period
calib <- thresholdCalibration(cal_twl_both$Twilight, cal_twl_both$Rise, lon.calib, lat.calib, method = "gamma")
zen[i]  <- calib[1]
zen0[i] <- calib[2]
alpha_mean[i] <- calib[3]
alpha_sd[i] <- calib[4]
for (i in 1:length(files)) {
#  load in both calibration periods
cal_twl1 <-  read.csv(paste0(out_wd, gsub(".lux", "", files[i]),  " cal1 twl.csv"))
cal_twl1$Twilight <- as.POSIXct(cal_twl1$Twilight,tz = "GMT")
cal_twl2 <-  read.csv(paste0(out_wd, gsub(".lux", "", files[i]),  " cal2 twl.csv"))
cal_twl2$Twilight <- as.POSIXct(cal_twl2$Twilight,tz = "GMT")
cal_twl_both <- rbind(cal_twl1,cal_twl2)
# define calibration period
calib <- thresholdCalibration(cal_twl_both$Twilight, cal_twl_both$Rise, lon.calib, lat.calib, method = "gamma")
zen[i]  <- calib[1]
zen0[i] <- calib[2]
alpha_mean[i] <- calib[3]
alpha_sd[i] <- calib[4]
}
for (i in 1:length(files)) {
#  load in both calibration periods
cal_twl1 <-  read.csv(paste0(out_wd, gsub(".lux", "", files[i]),  " cal1 twl.csv"))
cal_twl1$Twilight <- as.POSIXct(cal_twl1$Twilight,tz = "GMT")
cal_twl2 <-  read.csv(paste0(out_wd, gsub(".lux", "", files[i]),  " cal2 twl.csv"))
cal_twl2$Twilight <- as.POSIXct(cal_twl2$Twilight,tz = "GMT")
cal_twl_both <- rbind(cal_twl1,cal_twl2)
# define calibration period
calib <- thresholdCalibration(cal_twl_both$Twilight, cal_twl_both$Rise, lon.calib, lat.calib, method = "gamma")
zen[i]  <- calib[1]
zen0[i] <- calib[2]
alpha_mean[i] <- calib[3]
alpha_sd[i] <- calib[4]
}
range(zen)
# 93.04323 94.50927
range(zen0)
out_df <- data.frame(File = files[i], ID = gsub(".lux", "", files[i]),
zen = zen, zen0 = zen0, alpha_mean = alpha_mean, alpha_sd = alpha_sd)
out_name <- "./Data_outputs/cal_both_zenith.csv"
write.csv(out_df, out_name)
lon.calib <- -80.73
lat.calib <- -33.75
# getting zenith and alpha values
zen <- vector(length= length(files))
zen0 <- vector(length=  length(files))
alpha_mean <- vector(length= length(files))
alpha_sd <- vector(length= length(files))
for (i in 1:length(files)) {
#  load in calibration period
cal_twl <- read.csv(paste0(out_wd, gsub(".lux", "", files[i]),  " cal2 twl.csv"))
cal_twl$Twilight <- as.POSIXct(cal_twl$Twilight,tz = "UTC")
# define calibration period
calib <- thresholdCalibration(cal_twl$Twilight, cal_twl$Rise, lon.calib, lat.calib, method = "gamma")
zen[i]  <- calib[1]
zen0[i] <- calib[2]
alpha_mean[i] <- calib[3]
alpha_sd[i] <- calib[4]
}
range(zen)
# 94.7362 95.6623
range(zen0)
# 95.10534 104.68340
# PASTE OUT #
out_df <- data.frame(File = files[i], ID = gsub(".lux", "", files[i]),
zen = zen, zen0 = zen0, alpha_mean = alpha_mean, alpha_sd = alpha_sd)
out_name <- "./Data_outputs/cal2_zenith.csv"
write.csv(out_df, out_name)
cal <- read.csv("./Data_inputs/calibration_timings.csv")
head(cal)
meta <- read.csv("./Data_inputs/calibration_timings.csv")
# deployment and retrieval
meta$deploy_datetime <- as.POSIXct(paste(as.Date(strptime(meta$deploy_date, format = "%d/%m/%Y")), meta$deploy_time_UTC, sep = " "), tz = "UTC")
meta$retrieve_datetime <- as.POSIXct(paste(as.Date(strptime(meta$retrieve_date, format = "%d/%m/%Y")), meta$retrieve_time_UTC, sep = " "), tz = "UTC")
# crop by metadata spreadsheet
meta_sub <- subset(meta, Filename == gsub(".lux", "", files[i]),)
raw <- subset(raw, Date >= meta_sub$deploy_datetime_UTC & Date < meta_sub$retrieve_datetime_UTC ,)
nrow(raw)
# loading in light file
raw <- readMTlux(paste0(wd, files[i]), skip = 20)
names(raw) <- c("Date", "Light")
raw$Date <- as.POSIXct(raw$Date, tz = "GMT")
# crop by metadata spreadsheet
meta_sub <- subset(meta, Filename == gsub(".lux", "", files[i]),)
raw <- subset(raw, Date >= meta_sub$deploy_datetime_UTC & Date < meta_sub$retrieve_datetime_UTC ,)
nrow(raw)
raw
# loading in light file
raw <- readMTlux(paste0(wd, files[i]), skip = 20)
names(raw) <- c("Date", "Light")
raw$Date <- as.POSIXct(raw$Date, tz = "GMT")
# crop by metadata spreadsheet
meta_sub <- subset(meta, Filename == gsub(".lux", "", files[i]),)
meta_sub$deploy_datetime_UTC
meta <- read.csv("./Data_inputs/calibration_timings.csv")
# deployment and retrieval
meta$deploy_datetime <- as.POSIXct(paste(as.Date(strptime(meta$deploy_date, format = "%d/%m/%Y")), meta$deploy_time_UTC, sep = " "), tz = "UTC")
meta$retrieve_datetime <- as.POSIXct(paste(as.Date(strptime(meta$retrieve_date, format = "%d/%m/%Y")), meta$retrieve_time_UTC, sep = " "), tz = "UTC")
raw <- subset(raw, Date >= meta_sub$deploy_datetime & Date < meta_sub$retrieve_datetime ,)
nrow(raw)
range(raw$Date)
meta_sub
# manually check light curves
twl <- preprocessLight(raw,
threshold = threshold,
offset = offset,
lmax = 20)         # max. light value
wd_twl <- "./Data_outputs/Twilights/"
twilights <- dir(wd_twl)
twilights
wd_twl <- "./Data_outputs/Full twilights/"
twilights <- dir(wd_twl)
twilights
paste0(out_wd, gsub(".lux", "", files[i]))
paste0(out_wd, gsub(".lux", "", files[i]),  ".csv")
paste0(wd_twl, gsub(".lux", "", twilights),  ".csv")
i<-1
wd_twl <- "./Data_outputs/Full twilights/"
twilights <- dir(wd_twl)
twl <- list()
gap <- list()
twl[[i]] <- read.csv(paste0(wd_twl, gsub(".lux", "", twilights),  ".csv"))
twl[[i]] <- read.csv(paste0(wd_twl, gsub(".lux", "", twilights[i]),  ".csv"))
paste0(wd_twl, gsub(".lux", "", twilights[i])
)
twl[[i]] <- read.csv(paste0(wd_twl, twilights[i]))
head(twl[[i]])
twl[[i]]$Twilight <- as.POSIXct(twl[[i]]$Twilight, tz = "UTC")
twl[[i]]$t_diff <- c(as.numeric(difftime(twl[[i]]$Twilight3[2:nrow(twl[[i]])],
twl[[i]]$Twilight3[1:(nrow(twl[[i]])-1)],
units = "hours")), NA)
# splitting into dark periods of > 24 hours
twl[[i]]$Seq <- seq(1, nrow(twl[[i]]), 1)
gap[[i]] <- subset(twl[[i]], t_diff >24 & Rise == FALSE,)
head(gap[[i]])
log.prior
zen <- read.csv("./Data_outputs/cal_both_zenith.csv.csv")
zen <- read.csv("./Data_outputs/cal_both_zenith.csv")
zen
zen_1 <- read.csv("./Data_outputs/cal1_zenith.csv")
zen_2 <- read.csv("./Data_outputs/cal2_zenith.csv")
zen_1
zen_2
zen[!(zen$ID ==  "GLS8 D02 B67"),]
zen[!(zen$ID ==  "GLS8 D02 B67"),]
gsub(".lux", "", files[i]
library(GeoLight)
library(GeoLocTools)
library(probGLS)
library(TwGeos)
library(SGAT)
library(lubridate)
library(MASS)
# This code gets raw light files, crops by start and end calibration timings, identifies twilights manually and uses twilights to get zenith angles.
#### LOAD IN CALIBRATION TIMINGS ####
cal <- read.csv("./Data_inputs/calibration_timings.csv")
# start of deployment calibration
cal$cal1_st_datetime <- as.POSIXct(paste(as.Date(strptime(cal$cal1_st_date, format = "%d/%m/%Y")), cal$cal1_st_time_UTC, sep = " "), tz = "UTC")
cal$cal1_end_datetime <- as.POSIXct(paste(as.Date(strptime(cal$cal1_end_date, format = "%d/%m/%Y")), cal$cal1_end_time_UTC, sep = " "), tz = "UTC")
# end of deployment calibration
cal$cal2_st_datetime <- as.POSIXct(paste(as.Date(strptime(cal$cal2_st_date, format = "%d/%m/%Y")), cal$cal2_st_time_UTC, sep = " "), tz = "UTC")
cal$cal2_end_datetime <- as.POSIXct(paste(as.Date(strptime(cal$cal2_end_date, format = "%d/%m/%Y")), cal$cal2_end_time_UTC, sep = " "), tz = "UTC")
threshold <- 2 # threshold in lux
offset <- 21 # offset from UTC
# CHANGE i HERE MANUALLY for each individual, from 1 to 10.
i <- 1
wd <- "./Data_inputs/Raw light/"
files <- dir(wd)
lon.calib <- -80.73
lat.calib <- -33.75
# getting zenith and alpha values
zen <- vector(length= length(files))
zen0 <- vector(length=  length(files))
alpha_mean <- vector(length= length(files))
alpha_sd <- vector(length= length(files))
for (i in 1:length(files)) {
#  load in calibration period
cal_twl <- read.csv(paste0(out_wd, gsub(".lux", "", files[i]),  " cal1 twl.csv"))
cal_twl$Twilight <- as.POSIXct(cal_twl$Twilight,tz = "UTC")
# define calibration period
calib <- thresholdCalibration(cal_twl$Twilight, cal_twl$Rise, lon.calib, lat.calib, method = "gamma")
zen[i]  <- calib[1]
zen0[i] <- calib[2]
alpha_mean[i] <- calib[3]
alpha_sd[i] <- calib[4]
}
range(zen)
# 92.28572 93.97971
range(zen0)
# 93.61578 98.72228
# PASTE OUT #
zen0
files
out_df <- data.frame(File = files, ID = gsub(".lux", "", files),
zen = zen, zen0 = zen0, alpha_mean = alpha_mean, alpha_sd = alpha_sd)
out_name <- "./Data_outputs/cal1_zenith.csv"
write.csv(out_df, out_name)
lon.calib <- -80.73
lat.calib <- -33.75
# getting zenith and alpha values
zen <- vector(length= length(files))
zen0 <- vector(length=  length(files))
alpha_mean <- vector(length= length(files))
alpha_sd <- vector(length= length(files))
for (i in 1:length(files)) {
#  load in calibration period
cal_twl <- read.csv(paste0(out_wd, gsub(".lux", "", files[i]),  " cal2 twl.csv"))
cal_twl$Twilight <- as.POSIXct(cal_twl$Twilight,tz = "UTC")
# define calibration period
calib <- thresholdCalibration(cal_twl$Twilight, cal_twl$Rise, lon.calib, lat.calib, method = "gamma")
zen[i]  <- calib[1]
zen0[i] <- calib[2]
alpha_mean[i] <- calib[3]
alpha_sd[i] <- calib[4]
}
range(zen)
# 94.7362 95.6623
range(zen0)
# 95.10534 104.68340
# PASTE OUT #
out_wd <- "./Data_outputs/Calibration twilights/"
out_wd <- "./Data_outputs/Calibration twilights/"
lon.calib <- -80.73
lat.calib <- -33.75
# getting zenith and alpha values
zen <- vector(length= length(files))
zen0 <- vector(length=  length(files))
alpha_mean <- vector(length= length(files))
alpha_sd <- vector(length= length(files))
for (i in 1:length(files)) {
#  load in calibration period
cal_twl <- read.csv(paste0(out_wd, gsub(".lux", "", files[i]),  " cal1 twl.csv"))
cal_twl$Twilight <- as.POSIXct(cal_twl$Twilight,tz = "UTC")
# define calibration period
calib <- thresholdCalibration(cal_twl$Twilight, cal_twl$Rise, lon.calib, lat.calib, method = "gamma")
zen[i]  <- calib[1]
zen0[i] <- calib[2]
alpha_mean[i] <- calib[3]
alpha_sd[i] <- calib[4]
}
range(zen)
# 92.28572 93.97971
range(zen0)
# 93.61578 98.72228
# PASTE OUT #
out_df <- data.frame(File = files, ID = gsub(".lux", "", files),
zen = zen, zen0 = zen0, alpha_mean = alpha_mean, alpha_sd = alpha_sd)
out_name <- "./Data_outputs/cal1_zenith.csv"
write.csv(out_df, out_name)
lon.calib <- -80.73
lat.calib <- -33.75
# getting zenith and alpha values
zen <- vector(length= length(files))
zen0 <- vector(length=  length(files))
alpha_mean <- vector(length= length(files))
alpha_sd <- vector(length= length(files))
for (i in 1:length(files)) {
#  load in calibration period
cal_twl <- read.csv(paste0(out_wd, gsub(".lux", "", files[i]),  " cal2 twl.csv"))
cal_twl$Twilight <- as.POSIXct(cal_twl$Twilight,tz = "UTC")
# define calibration period
calib <- thresholdCalibration(cal_twl$Twilight, cal_twl$Rise, lon.calib, lat.calib, method = "gamma")
zen[i]  <- calib[1]
zen0[i] <- calib[2]
alpha_mean[i] <- calib[3]
alpha_sd[i] <- calib[4]
}
range(zen)
# 94.7362 95.6623
range(zen0)
# 95.10534 104.68340
# PASTE OUT #
out_df <- data.frame(File = files, ID = gsub(".lux", "", files),
zen = zen, zen0 = zen0, alpha_mean = alpha_mean, alpha_sd = alpha_sd)
out_name <- "./Data_outputs/cal2_zenith.csv"
write.csv(out_df, out_name)
lon.calib <- -80.73
lat.calib <- -33.75
zen <- vector(length= length(files))
zen0 <- vector(length=  length(files))
alpha_mean <- vector(length= length(files))
alpha_sd <- vector(length= length(files))
for (i in 1:length(files)) {
#  load in both calibration periods
cal_twl1 <-  read.csv(paste0(out_wd, gsub(".lux", "", files[i]),  " cal1 twl.csv"))
cal_twl1$Twilight <- as.POSIXct(cal_twl1$Twilight,tz = "GMT")
cal_twl2 <-  read.csv(paste0(out_wd, gsub(".lux", "", files[i]),  " cal2 twl.csv"))
cal_twl2$Twilight <- as.POSIXct(cal_twl2$Twilight,tz = "GMT")
cal_twl_both <- rbind(cal_twl1,cal_twl2)
# define calibration period
calib <- thresholdCalibration(cal_twl_both$Twilight, cal_twl_both$Rise, lon.calib, lat.calib, method = "gamma")
zen[i]  <- calib[1]
zen0[i] <- calib[2]
alpha_mean[i] <- calib[3]
alpha_sd[i] <- calib[4]
}
range(zen)
# 93.04323 94.50927
range(zen0)
# 95.10534 104.68340
out_df <- data.frame(File = files, ID = gsub(".lux", "", files),
zen = zen, zen0 = zen0, alpha_mean = alpha_mean, alpha_sd = alpha_sd)
out_name <- "./Data_outputs/cal_both_zenith.csv"
write.csv(out_df, out_name)
zen <- read.csv("./Data_outputs/cal_both_zenith.csv")
zen_1 <- read.csv("./Data_outputs/cal1_zenith.csv")
zen_2 <- read.csv("./Data_outputs/cal2_zenith.csv")
zen[!(zen$ID ==  "GLS8 D02 B67"),]
zen
mean(zen[!(zen$ID ==  "GLS8 D02 B67"),]$zen0)
# for GLS8 D02 B67, the zenith0 value is oddly high (104), so using the mean of all other individuals.
zen$zen0[zen$ID == "GLS8 D02 B67"] <- mean(zen[!(zen$ID ==  "GLS8 D02 B67"),]$zen0)
zen$alpha_mean[zen$ID == "GLS8 D02 B67"] <- mean(zen[!(zen$ID ==  "GLS8 D02 B67"),]$alpha_mean)
zen$alpha_sd[zen$ID == "GLS8 D02 B67"] <- mean(zen[!(zen$ID ==  "GLS8 D02 B67"),]$alpha_sd)
zen$zen[zen$ID == "GLS8 D02 B67"] <- mean(zen[!(zen$ID ==  "GLS8 D02 B67"),]$zen)
range(zen$zen)
# 93.20690 94.50927
range(zen$zen0)
earthseaMask <- function(xlim, ylim, n = 2, pacific=FALSE) {
if (pacific) { wrld_simpl <- nowrapRecenter(wrld_simpl, avoidGEOS = TRUE)}
# create empty raster with desired resolution
r = raster(nrows = n * diff(ylim), ncols = n * diff(xlim), xmn = xlim[1],
xmx = xlim[2], ymn = ylim[1], ymx = ylim[2], crs = proj4string(wrld_simpl))
# create a raster for the stationary period, in this case by giving land a value of 1 and sea NA
mask = cover(rasterize(elide(wrld_simpl, shift = c(-360, 0)), r, 1, silent = TRUE),
rasterize(wrld_simpl, r, 1, silent = TRUE),
rasterize(elide(wrld_simpl,shift = c(360, 0)), r, 1, silent = TRUE))
xbin = seq(xmin(mask),xmax(mask),length=ncol(mask)+1)
ybin = seq(ymin(mask),ymax(mask),length=nrow(mask)+1)
function(p) mask[cbind(.bincode(p[,2],ybin),.bincode(p[,1],xbin))]
}
# CREATING MOVEMENT MODEL
beta  <- c(2, 0.1) # from Franklin et al. 2022
matplot(0:100, dgamma(0:100, beta[1], beta[2]),
type = "l", col = "orange",lty = 1,lwd = 2,ylab = "Density", xlab = "km/h")
files
print(paste(gsub(".lux", "", files[i])))
# RUNNING INITIAL PATH #
path <- thresholdPath(tw[[i]]$Twilight, tw[[i]]$Rise, zenith = zen$zen[i], tol=0.01)
i<-1
# RUNNING INITIAL PATH #
path <- thresholdPath(twl[[i]]$Twilight, twl[[i]]$Rise, zenith = zen$zen[i], tol=0.01)
library(GeoLight)
library(GeoLocTools)
library(probGLS)
library(TwGeos)
library(SGAT)
library(MASS)
library(ggplot2)
setupGeolocation()
library(cowplot)
#### 1. LOAD IN TWILIGHTS AND CALCULATE GAPS TO LATER FIX THESE PERIODS ON THE COLONY ####
wd_twl <- "./Data_outputs/Full twilights/"
twilights <- dir(wd_twl)
# for each individual, load in twilight data and calculate gaps (based on 24 hours or more in the dark) to later define as on the colony
twl <- list()
gaps <- list()
for (i in 1:nrow(in_df)) {
twl[[i]] <- read.csv(paste0(wd_twl, twilights[i]))
twl[[i]]$Twilight <- as.POSIXct(twl[[i]]$Twilight, tz = "UTC")
twl[[i]]$t_diff <- c(as.numeric(difftime(twl[[i]]$Twilight3[2:nrow(twl[[i]])],
twl[[i]]$Twilight3[1:(nrow(twl[[i]])-1)],
units = "hours")), NA)
# splitting into dark periods of > 24 hours
twl[[i]]$Seq <- seq(1, nrow(twl[[i]]), 1)
gaps[[i]] <- subset(twl[[i]], t_diff >24 & Rise == FALSE,)
}
zen <- read.csv("./Data_outputs/cal_both_zenith.csv")
zen_1 <- read.csv("./Data_outputs/cal1_zenith.csv")
zen_2 <- read.csv("./Data_outputs/cal2_zenith.csv")
# for GLS8 D02 B67, the zenith0 value is oddly high (104), so using the mean of all other individuals.
zen$zen0[zen$ID == "GLS8 D02 B67"] <- mean(zen[!(zen$ID ==  "GLS8 D02 B67"),]$zen0)
zen$alpha_mean[zen$ID == "GLS8 D02 B67"] <- mean(zen[!(zen$ID ==  "GLS8 D02 B67"),]$alpha_mean)
zen$alpha_sd[zen$ID == "GLS8 D02 B67"] <- mean(zen[!(zen$ID ==  "GLS8 D02 B67"),]$alpha_sd)
zen$zen[zen$ID == "GLS8 D02 B67"] <- mean(zen[!(zen$ID ==  "GLS8 D02 B67"),]$zen)
range(zen$zen)
# 93.20690 94.50927
range(zen$zen0)
# 95.10534 97.79259
print(paste(gsub(".lux", "", files[i])))
# RUNNING INITIAL PATH #
path <- thresholdPath(twl[[i]]$Twilight, twl[[i]]$Rise, zenith = zen$zen[i], tol=0.01)
i
head(twl[[i]]$Twilight)
twl[[i]]$Twilight
nrow(in_df)
twl <- list()
gaps <- list()
for (i in 1:length(twilights)) {
twl[[i]] <- read.csv(paste0(wd_twl, twilights[i]))
twl[[i]]$Twilight <- as.POSIXct(twl[[i]]$Twilight, tz = "UTC")
twl[[i]]$t_diff <- c(as.numeric(difftime(twl[[i]]$Twilight3[2:nrow(twl[[i]])],
twl[[i]]$Twilight3[1:(nrow(twl[[i]])-1)],
units = "hours")), NA)
# splitting into dark periods of > 24 hours
twl[[i]]$Seq <- seq(1, nrow(twl[[i]]), 1)
gaps[[i]] <- subset(twl[[i]], t_diff >24 & Rise == FALSE,)
}
i<-1
# RUNNING INITIAL PATH #
path <- thresholdPath(twl[[i]]$Twilight, twl[[i]]$Rise, zenith = zen$zen[i], tol=0.01)
head(path)
head(path$x
)
trackMidpts(x0)
x0 <- path$x  # setting first location
z0 <- trackMidpts(x0)
trackMidpts(x0)
??trackMidpts()
nrow(x0)
# fixing start and end locations as colony
fixedx <- rep(F, nrow(x0))
fixedx[1] <- T # first location estimate
fixedx[nrow(x0)] <- T # last location estimate
# assigning gap periods at colony
for (a in 1:nrow(gap[[i]])) {
fixedx[gap[[i]]$Seq[a]] <- T
fixedx[gap[[i]]$Seq[a]+1] <- T
}
# assigning gap periods at colony
for (a in 1:nrow(gaps[[i]])) {
fixedx[gaps[[i]]$Seq[a]] <- T
fixedx[gaps[[i]]$Seq[a]+1] <- T
}
fixedx
# setting lon and lat of colony
lon.calib <- -80.73
lat.calib <- -33.75
# assigning fixed values as colony locations
x0[fixedx, 1] <- lon.calib
x0[fixedx, 2] <- lat.calib
z0 <- trackMidpts(x0) # we need to update the z0 locations
xlim <- range(x0[,1]+c(-5,5))
xlim <- range(x0[,1]+c(-5,5))
print(paste(gsub(".lux", "", files[i])))
# RUNNING INITIAL PATH #
path <- thresholdPath(twl[[i]]$Twilight, twl[[i]]$Rise, zenith = zen$zen[i], tol=0.01)
x0 <- path$x
z0 <- trackMidpts(x0) # getting midpoints of a path
# DEFINE KNOWN LOCATIONS #
# fixing start and end locations as colony
fixedx <- rep(F, nrow(x0))
fixedx[1] <- T # first location estimate
fixedx[nrow(x0)] <- T # last location estimate
# assigning gap periods at colony
for (a in 1:nrow(gaps[[i]])) {
fixedx[gaps[[i]]$Seq[a]] <- T
fixedx[gaps[[i]]$Seq[a]+1] <- T
}
# assigning fixed values as colony locations
x0[fixedx, 1] <- lon.calib
x0[fixedx, 2] <- lat.calib
z0 <- trackMidpts(x0) # we need to update the z0 locations
# SETTING LAND MASK
xlim <- range(x0[,1]+c(-5,5))
x0
range(x0[,1]+c(-5,5))
xlim <- range(x0[,1]+c(-5,5))
ylim <- range(x0[,2]+c(-5,5))
mask <- earthseaMask(xlim, ylim, n = 1, pacific = TRUE)
log.prior <- function(p) {
f <- mask(p)
ifelse(f | is.na(f), -100, 0)
}
mask
log.prior
mask
print(paste(a, n_iter, sep = "..."))
n_iter <- 10
print(paste(a, n_iter, sep = "..."))
model <- thresholdModel(twilight = tw[[i]]$Twilight,
rise = tw[[i]]$Rise,
twilight.model = "ModifiedGamma",
alpha = c(zen$alpha_mean[i], zen$alpha_sd[i]),
beta = beta,
logp.x = log.prior, logp.z = log.prior,
x0 = x0,
z0 = z0,
zenith = zen$zen0[i],
fixedx = fixedx)
model <- thresholdModel(twilight = twl[[i]]$Twilight,
rise = twl[[i]]$Rise,
twilight.model = "ModifiedGamma",
alpha = c(zen$alpha_mean[i], zen$alpha_sd[i]),
beta = beta,
logp.x = log.prior, logp.z = log.prior,
x0 = x0,
z0 = z0,
zenith = zen$zen0[i],
fixedx = fixedx)
# We also need to define the error distribution around each location. We set that using a multivariate normal distribution. Then we can fit the model:
proposal.x <- mvnorm(S=diag(c(0.0025,0.0025)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.0025,0.0025)),n=nlocation(z0))
fit <- estelleMetropolis(model, proposal.x, proposal.z, iters =2000, thin = 20)
